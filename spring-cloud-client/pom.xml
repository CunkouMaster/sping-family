<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.2.10.RELEASE</version>
    <relativePath/>
  </parent>
  <groupId>spring.test</groupId>
  <artifactId>client-parent</artifactId>
  <version>1.0.0</version>
  <name>client-parent</name>
  <description>Demo project for Spring Boot</description>

  <modules>
  </modules>

  <!-- 全局属性配置 -->
  <properties>
    <java.version>1.8</java.version>
    <spring-cloud.version>Hoxton.SR8</spring-cloud.version>
    <spring-cloud-alibaba.version>2.2.1.RELEASE</spring-cloud-alibaba.version>

    <mybatis.spring.boot.version>2.1.3</mybatis.spring.boot.version>
    <!--    <mysql.version>5.1.47</mysql.version>-->
    <druid-spring-boot-starter.version>1.1.10</druid-spring-boot-starter.version>

    <!-- 编译设置-->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding><!--用来定义资源文件的编码格式-->
    <!--<project.build.name>tools</project.build.name>--><!-- 用来定义包名称-->
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
  </properties>

  <!--  具体依赖-->
  <dependencies>
    <dependency>
      <groupId>org.mybatis.spring.boot</groupId>
      <artifactId>mybatis-spring-boot-starter</artifactId>
      <version>${mybatis.spring.boot.version}</version>
    </dependency>

    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
<!--      <version>${mysql.version}</version>-->
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>com.alibaba</groupId>
      <artifactId>druid-spring-boot-starter</artifactId>
      <version>${druid-spring-boot-starter.version}</version>
    </dependency>


    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.junit.vintage</groupId>
          <artifactId>junit-vintage-engine</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

  </dependencies>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-dependencies</artifactId>
        <version>${spring-cloud.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>com.alibaba.cloud</groupId>
        <artifactId>spring-cloud-alibaba-dependencies</artifactId>
        <version>${spring-cloud-alibaba.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <plugins>

      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <version>2.2.2.RELEASE</version>
      </plugin>

      <!--（编译插件）spring Boot在编译的时候, 是有默认JDK版本的, 这里自定义指定JDK版本 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>${java.version}</source><!--源代码编译版本-->
          <target>${java.version}</target><!--目标平台编译版本-->
          <encoding>${project.build.sourceEncoding}</encoding><!--字符集编码-->
        </configuration>
      </plugin>

      <!-- 设置资源文件的编码方式 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <configuration>
          <encoding>${project.build.sourceEncoding}</encoding>
        </configuration>
      </plugin>

      <!-- 打包跳过test（针对传统spring项目）-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

      <!-- 排除文件 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <excludes>
            <exclude>*.yml</exclude>
            <!--                        <exclude>config/</exclude>-->
          </excludes>
        </configuration>
      </plugin>

<!--      			&lt;!&ndash;瘦版jar包&ndash;&gt;-->
<!--      			<plugin>-->
<!--      				&lt;!&ndash; maven-jar-plugin用于生成META-INF/MANIFEST.MF文件的部分内容， &ndash;&gt;-->
<!--      				<groupId>org.apache.maven.plugins</groupId>-->
<!--      				<artifactId>maven-jar-plugin</artifactId>-->
<!--      				<configuration>-->
<!--      					<archive>-->
<!--      						<manifest>-->
<!--      							&lt;!&ndash; true: 会在MANIFEST.MF加上Class-Path项并配置依赖包 &ndash;&gt;-->
<!--      							<addClasspath>true</addClasspath>-->
<!--      							&lt;!&ndash; 指定依赖包所在目录。 &ndash;&gt;-->
<!--      							<classpathPrefix>/libs/</classpathPrefix>-->
<!--      							&lt;!&ndash; 指定MANIFEST.MF中的Main-Class， &ndash;&gt;-->
<!--      							<mainClass>ccx.cloud.platform.analysis.api.Application</mainClass>-->

<!--      							&lt;!&ndash; 如果不加这一句则依赖的SNAPSHOT的jar包就会表现为MANIFEST.MF中的-->
<!--                      Class-Path: lib/facede-user-1.0-20160512.093945-1.jar-->
<!--                      但是打包到../lib/facede-user-1.0-SNAPSHOT.jar下面包,这样就会出现找不到类的情况 &ndash;&gt;-->
<!--      							<useUniqueVersions>false</useUniqueVersions>-->
<!--      						</manifest>-->
<!--      					</archive>-->

<!--      					&lt;!&ndash;打maven仓库jar包时排除&ndash;&gt;-->
<!--      					<excludes>-->
<!--      						&lt;!&ndash;注意该目录从编译结果目录开始算目录结构&ndash;&gt;-->
<!--      						<exclude>*.yml</exclude>-->
<!--      					</excludes>-->
<!--      				</configuration>-->
<!--      			</plugin>-->

<!--      			&lt;!&ndash;拷贝依赖jar到指定的目录&ndash;&gt;-->
<!--      			<plugin>-->
<!--      				<groupId>org.apache.maven.plugins</groupId>-->
<!--      				<artifactId>maven-dependency-plugin</artifactId>-->
<!--      				<executions>-->
<!--      					<execution>-->
<!--      						<id>copy-dependencies</id>-->
<!--      						<phase>package</phase>-->
<!--      						<goals>-->
<!--      							<goal>copy-dependencies</goal>-->
<!--      						</goals>-->
<!--      						<configuration>-->
<!--      							<outputDirectory>../../../libs</outputDirectory>-->
<!--      							<overWriteReleases>false</overWriteReleases>-->
<!--      							<overWriteSnapshots>false</overWriteSnapshots>-->
<!--      							<overWriteIfNewer>true</overWriteIfNewer>-->
<!--      						</configuration>-->
<!--      					</execution>-->
<!--      				</executions>-->
<!--      			</plugin>-->


    </plugins>
  </build>

</project>
